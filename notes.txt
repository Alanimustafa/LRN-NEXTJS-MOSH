// Chapter 5 
// Database Integration with Prisma

Definitions:

mySQL -> DataBase Engine. Other database engines (Postgres, MongoDB)

DataGrip -> Database IDE (Integrated Development Environment) - This tool is used to connect to the database, write and run SQL, browse tables, views, indexes, foreign keys and all schema stuff, refactor database objects, compare and sync schemas and visualize realtions between tables (ER diagrams).

|| PRISMA
Prisma -> Next generation Node.js and TypeScript ORM [Object-Relation Mapping] too for Node.js and TypeScript. ORM sits between the database and the application. It helps to interact with database in a clean, type-safe way. it translates the schema to SQL for your database.
Prisma is useful because: 
1- Type-safe queries (catch errors at compile time)
2- Auto-generated client for fast development
3- Clear schema definition in one file
4- Great developer experience (e.g., auto-complete, migrations, introspection)

Installing Prisma in Bash:
npm install prisma --save-dev
npm install @prisma/client
npx prisma init

Prisma models: Visit prisma models on google.

Notes: 
1- Install mySQL from mySQL.com
2- Install DataGrip from JetBrains.
3- Install Prisma extension.
4- npx prisma init --> to initiate prisma in our project and create the prisma folder which has the prisma schema in it. Also, it creates the env file.
5- npx prisma format --> to clean and format the prisam schema file and make the text more readable.
6- npx prisma migrate dev --> To keep our DataBase Schema in Sync with our Prisma Schema.
7- npm prisma @prisam/client --> to add the prisma client to prisma package.
8- npx prisma generate --> Runs Prisma CLI (no need to install it globally)

The difference between the npm and npx commands in Node.JS :
* npm is like downloading a power tool and adding it to your toolbox.
* npx is like renting the tool, using it once, and returning it immediately.


Cloudinary:
1- Installation: npm install next-cloudinary@latest
2- Next-Cloudinary Upload link: https://next.cloudinary.dev/clduploadwidget/basic-usage
3- Cludinary Upload UI stytles link: https://demo.cloudinary.com/uw/#/

Note: onUpload is not supported anymore with cloudinary V2 and V3. Instead use onSuccess.


NEXT AUTH
1- Website : https://next-auth.js.org
2- Installation: npm install next-auth
3- Create folder api/auth/[...nextauth]/route.tsx 
    Note: [...nextauth] means catch all 
4- create the route.tsx file which will handle the GET and POST requests to the api. Also, it exports the handler function on each of those requests.
5- update the .env file:
    a- adding the route NEXTAUTH_URL="http://localhost:3000/api/auth"
    b- adding the sercret code to the .env file.
    NEXTAUTH_SECRET=""
    The code could be any random characters, or we can generate it from the bash by using the command: 
    openssl rand -base64 32
6- Use https://next-auth.js.org  The NEXT JS Authentication library to specify the authontication management provider (for example Google Auth).
    * Installation: npm install next-auth
    * Add the api route (or the route handler).
    * Use the guide for the Next JS version you have, because from NEXT JS 13.2 and above, the setup is different.
    * Route creation: Create the folder:
        app/api/auth/[...nextauth]/route.tsx 
        Note: [...nextauth] This is the catch-all folder this will handle any route starts with api/auth route.
7- We need to add a new env variables
    * NEXTAUTH_URL="http://localhost:3000"
    * NEXTAUTH_SECRET="fdsfdfsdfsdfsdfsdf" any long string.
        or we can use the terminal and type the following command to generate the sercret a random sequense of bytes using the 64 algorithm.
        bash: openssl rand -base64 32
8- Configure Provider 
    * Using the https://next-auth.js.org and select the provider to choose the desiered provider (ex: Auth0, Amazon, Facebook , etc)

